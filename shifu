#! /bin/sh

shifu_mode_cmds=0
shifu_mode_args=1
shifu_mode_help=2

shifu_cmd_name() {
  [ $# -ne 1 ] && _shifu_error "Commands cannot contain spaces got: \"$@\""
  [ $mode -ne $shifu_mode_args ] && cmd_name="$1"
}

shifu_cmd_help() {
  [ $mode -ne $shifu_mode_args ] && cmd_help="$@"
}

shifu_cmd_long() {
  [ $mode -ne $shifu_mode_args ] && cmd_long="$@"
}

shifu_cmd_subs() {
  [ $mode -ne $shifu_mode_args ] && cmd_subs="$@"
}

shifu_cmd_func() {
  [ $mode -ne $shifu_mode_args ] && cmd_func="$@"
}

shifu_cmd_arg() {
  case $mode in
    $shifu_mode_help)
      [ -z "$cmd_subs" ] && _shifu_arg_help "$@" ;;
    $shifu_mode_args)
      [ -z "$cmd_subs" ] && _shifu_parse_arg "$@" || _shifu_handle_arg_global "$@" ;;
  esac
}

shifu_cmd_arg_loc() {
  case $mode in
    $shifu_mode_help) _shifu_arg_help "$@" ;;
    $shifu_mode_args) _shifu_parse_arg "$@" ;;
  esac
}

shifu_less() {
  cmd_name()    { shifu_cmd_name "$@"; }
  cmd_help()    { shifu_cmd_help "$@"; }
  cmd_long()    { shifu_cmd_long "$@"; }
  cmd_subs()    { shifu_cmd_subs "$@"; }
  cmd_func()    { shifu_cmd_func "$@"; }
  cmd_arg()     { shifu_cmd_arg "$@"; }
  cmd_arg_loc() { shifu_cmd_arg_loc "$@"; }
}

shifu_run() {
  shifu_var_store mode parent parse_local parse_stage arg arg_matched global_help \
                  shifu_cmds cmd cmd_name cmd_help cmd_long cmd_subs cmd_func \
                  help_stage help_usage help_arguments help_options help_string \
                  subcmd_help no_options case_stmt global_case subcmd subcmds
  mode=$shifu_mode_cmds
  parent="$1"; cmd="$1"; shift; "$parent"; shifu_cmds="$cmd_subs"
  while [ $# -ne 0 -a -n "$cmd_subs" ]; do
    _shifu_parse_args true "$parent" "$@"
    mode=$shifu_mode_cmds
    shift $_shifu_args_parsed
    arg_matched=''
    for cmd in $shifu_cmds; do
      _shifu_clear_cmd_vars
      "$cmd"
      [ "$1" != "$cmd_name" ] && continue
      arg_matched=true; shift
      [ -n "$cmd_func" ] && break
      parent="$cmd"
      shifu_cmds="$cmd_subs"
      break
    done
    [ "$arg_matched" = true -a -n "$cmd_func" ] && break
    [ "$arg_matched" = true -a -n "$cmd_subs" ] && continue
    [ "$1" != "-h" -a "$1" != "--help" ] && echo "Unknown command: $1"
    _shifu_help "$parent" 1
  done
  [ -z "$cmd_func" ] && { echo "$cmd_name" requires arguments; _shifu_help "$cmd" 1; }
  [ "$1" = "-h" -o "$1" = "--help" ] && _shifu_help "$cmd" 0
  _shifu_parse_args false "$cmd" "$@"
  shift $_shifu_args_parsed
  "$cmd_func" "$@"
  shifu_var_restore mode parent parse_local parse_stage arg arg_matched global_help \
                    shifu_cmds cmd cmd_name cmd_help cmd_long cmd_subs cmd_func \
                    help_stage help_usage help_arguments help_options help_string \
                    subcmd_help no_options case_stmt global_case subcmd subcmds
}

shifu_var_store() {
  while [ $# -ne 0 ]; do
    eval "[ -z "\$$1" ] && { shift; continue; }
          [ -z \$shifu_${1}_shifu ] && shifu_${1}_shifu=\$$1 ||
          _shifu_error \"Cannot use variable 'shifu_${1}_shifu'\""
    shift
  done
}

shifu_var_restore() {
  while [ $# -ne 0 ]; do
    eval "$1=\$shifu_${1}_shifu; unset -v shifu_${1}_shifu"
    shift
  done
}

_shifu_parse_args() {
  mode=$shifu_mode_args
  parse_stage=0
  parse_local="$1"; cmd="$2"; shift 2
  case_stmt="case \"\$1\" in $global_case -h|--help) _shifu_help \"$cmd\" 0 ;; "
  "$cmd"
  parse_local=''
  [ $parse_stage -eq 0 ] && _shifu_update_case_stmt_invalid_option
  case_stmt="$case_stmt break ;; esac"
  _shifu_args_parsed=0
  while true; do
    eval "$case_stmt"
  done
}

_shifu_parse_arg() {
  no_options=true
  [ "$1" != -- ] && { no_options=''; case_stmt="$case_stmt $1"; shift; }
  while [ $# -gt 1 -a "$1" != -- ]; do
    case_stmt="${case_stmt}|$1"; shift
  done; shift
  # remaining
  if [ $# -eq 1 ]; then
    [ "$parse_local" = true ] && _shifu_error "Remaining arguments cannot be local: $1"
    [ $parse_stage -eq 0 ] && _shifu_update_case_stmt_invalid_option
    parse_stage=2
  # positional
  elif [ "$no_options" = true ]; then
    [ "$parse_local" = true ] && _shifu_error "Positional arguments cannot be local: $1"
    if [ $parse_stage -eq 0 ]; then
      parse_stage=1
      _shifu_update_case_stmt_invalid_option
    elif [ $parse_stage -gt 1 ]; then
      _shifu_error "No arguments after remaining are declared: $1"
    fi
    _shifu_set_variable "$1" ""
    case_stmt="$case_stmt [ \$# -eq 0 ] && _shifu_error 'Missing positional argument $1'; "
    case_stmt="$case_stmt $1=\$1; shift; _shifu_ack_arg; "
  # option + argument without default
  elif [ $# -eq 2 ]; then
    _shifu_error_if_invalid_arg_order "$1" $parse_stage
    _shifu_set_variable "$1" ""
    case_stmt="$case_stmt) $1=\$2; shift 2; _shifu_ack_arg 2 ;; "
  # option + argument with default
  elif [ $# -eq 3 ]; then
    _shifu_error_if_invalid_arg_order "$1" $parse_stage
    _shifu_set_variable "$1" "$2"
    case_stmt="$case_stmt) $1=\$2; shift 2; _shifu_ack_arg 2 ;; "
  # option no argument, default-set
  elif [ $# -eq 4 ]; then
    _shifu_error_if_invalid_arg_order "$1" $parse_stage
    _shifu_set_variable "$1" "$2"
    case_stmt="$case_stmt) $1=$3; shift; _shifu_ack_arg ;; "
  fi
}

_shifu_handle_arg_global() {
  no_options=true
  if [ $# -gt 1 -a "$1" != -- ]; then
    no_options=''
    global_case="$global_case $1"
    global_help="$global_help\n  $1"
    shift
  fi
  while [ $# -gt 1 -a "$1" != -- ]; do
    global_case="${global_case}|$1"
    global_help="$global_help, $1"
    shift
  done; shift
  # remaining
  if [ $# -eq 1 ]; then
    _shifu_error "Remaining arguments cannot be global"
  # positional
  elif [ "$no_options" = true ]; then
    _shifu_error "Positional arguments cannot be global: $1"
  # option + argument without default
  elif [ $# -eq 2 ]; then
    _shifu_set_variable "$1" ""
    global_case="$global_case) $1=\$2; shift 2; _shifu_ack_arg 2 ;; "
    global_help="$global_help $1\n    $2"
  # option + argument with default
  elif [ $# -eq 3 ]; then
    _shifu_set_variable "$1" "$2"
    global_case="$global_case) $1=\$2; shift 2; _shifu_ack_arg 2 ;; "
    global_help="$global_help $1\n    $3\n    Default: $2"
  # option no argument, default-set
  elif [ $# -eq 4 ]; then
    _shifu_set_variable "$1" "$2"
    global_case="$global_case) $1=$3; shift; _shifu_ack_arg ;; "
    global_help="$global_help\n    $4\n    Default: $2, set: $3"
  fi
}

_shifu_ack_arg() {
  _shifu_args_parsed=$((_shifu_args_parsed + ${1:-1}))
}

_shifu_clear_cmd_vars() {
    cmd_name='' cmd_help='' cmd_long='' cmd_subs='' cmd_func=''
}

_shifu_arg_help() {
  no_options=true
  [ "$1" != -- ] && { no_options=''; help_options="$help_options\n  $1"; shift; }
  while [ $# -gt 1 -a "$1" != -- ]; do
    help_options="$help_options, $1"; shift
  done; shift
 # remaining
  if [ $# -eq 1 ]; then
    help_stage=2
    help_usage="$help_usage ...[REMAINING]"
    help_arguments="$help_arguments\n  REMAINING\n    $1"
  # positional
  elif [ "$no_options" = true ]; then
    if [ $help_stage -lt 1 ]; then
      help_stage=1
    elif [ $help_stage -gt 1 ]; then
      _shifu_error "No arguments after remaining are declared: $1"
    fi
    help_usage="$help_usage [$1]"
    help_arguments="$help_arguments\n  $1\n    $2"
  # option + argument without default
  elif [ $# -eq 2 ]; then
    _shifu_error_if_invalid_arg_order "$1" $help_stage
    help_options="$help_options [$1]\n    $2"
  # option + argument with default
  elif [ $# -eq 3 ]; then
    _shifu_error_if_invalid_arg_order "$1" $help_stage
    help_options="$help_options [$1]\n    $3\n    Default: $2"
  # option no argument default set
  elif [ $# -eq 4 ]; then
    _shifu_error_if_invalid_arg_order "$1" $help_stage
    help_options="$help_options\n    $4\n    Default: $2, set: $3"
  fi
}

_shifu_update_case_stmt_invalid_option() {
  case_stmt="$case_stmt
    -*|--*) echo \"Invalid option: \$1\"; _shifu_help \"\$cmd\" 1 ;;
    *)"
}

_shifu_set_variable() {
  eval "$1=\"$2\"" > /dev/null 2>&1
  [ $? -eq 0 ] && return 0
  _shifu_error "Invalid variable name: $1"
}

_shifu_error_if_invalid_arg_order() {
  [ $2 -eq 0 ] && return
  _shifu_error "No options after positional/remaining arguments: $1"
}

_shifu_error() {
  echo "$1"
  exit 1
}

_shifu_help() {
  "$1"
  mode=$shifu_mode_help
  _shifu_make_subcmd_help
  _shifu_clear_cmd_vars
  help_stage=0 help_usage='' help_arguments='' help_options='' help_string=''
  "$1"
  [ -n "$cmd_func" ] && help_options="$help_options$global_help"
  help_options="$help_options\n  -h, --help\n    Show this help"
  [ -n "$help_usage" ] && help_usage="$cmd_name [OPTIONS]$help_usage"
  [ -n "$cmd_help" ] && _shifu_add_to_help_string "$cmd_help"
  [ -n "$cmd_long" ] && _shifu_add_to_help_string "$cmd_long"
  [ -n "$help_usage" ] && _shifu_add_to_help_string "Usage\n  $help_usage"
  [ -n "$help_arguments" ] && _shifu_add_to_help_string "Arguments$help_arguments"
  [ -n "$subcmd_help" ] && _shifu_add_to_help_string "Subcommands$subcmd_help"
  [ -n "$help_options" ] && _shifu_add_to_help_string "Options$help_options"
  [ -n "$help_string" ] && printf "$help_string\n"
  exit $2
}

_shifu_add_to_help_string() {
  [ -z "$help_string" ] && help_string="$1" || help_string="$help_string\n\n$1"
}

_shifu_make_subcmd_help() {
  [ -z "$cmd_subs" ] && return
  subcmds=$cmd_subs
  _shifu_clear_cmd_vars
  for subcmd in $subcmds; do
    help_stage=0
    "$subcmd"
    subcmd_help="$subcmd_help\n  $cmd_name"
    [ -n "$cmd_help" ] && subcmd_help="$subcmd_help\n    $cmd_help"
  done
}

shifu_trace() {
  eval "echo $1: \$$1"
}
