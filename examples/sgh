# /bin/sh

# Wrapper around curl commands to the github rest api. Documentation:
# https://docs.github.com/en/rest?apiVersion=2022-11-28

. "$(dirname "$0")"/shifu || exit 1

auth_file="$HOME/.sgh"

sgh_cmd() {
  shifu_cmd_name sgh
  shifu_cmd_help "Example github cli implemented with shifu"
  shifu_cmd_subs auth_cmd issue_cmd pr_cmd
}

auth_cmd() {
  shifu_cmd_name auth
  shifu_cmd_help "Commands for interacting authentication tokens"
  shifu_cmd_subs auth_clear_cmd auth_set_cmd
}

auth_set_cmd() {
  shifu_cmd_name set
  shifu_cmd_help "Set token for authentication"
  shifu_cmd_func auth_set

  shifu_arg -- PAT "Personal access token, documentation:\nhttps://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens"
}

auth_set() {
  shifu_parse_args auth_set_cmd "$@"
  printf "$PAT" > "$auth_file"
}

auth_clear_cmd() {
  shifu_cmd_name clear
  shifu_cmd_help "Clear token for authentication"
  shifu_cmd_func auth_clear
}

auth_clear() {
  [ -f "$HOME/.sgh" ] && rm "$HOME/.sgh"
}

_auth_get() {
  cat "$auth_file"
}

issue_cmd() {
  shifu_cmd_name issue
  shifu_cmd_help "Commands for interacting with github repository issues"
  shifu_cmd_subs issue_list_cmd issue_get_cmd

  shifu_arg -R --repo -- REPO "Github repository in OWNER/REPO format"
}

issue_list_cmd() {
  shifu_cmd_name list
  shifu_cmd_help "List issues in a GitHub repository"
  shifu_cmd_func issue_list

  shifu_arg -n --number -- NUMBER 10 "Max number of results"
}

issue_list() {
  shifu_parse_args issue_list_cmd "$@"
  update_query per_page "100"
  _gh_api "repos/$REPO/issues$query" | \
    jq -M "map(select(has(\"pull_request\")|not) |
           \"\(.number): \(.title)\") |
           .[:$NUMBER] | .[]" \
    | xargs -I{} echo {}
}

issue_get_cmd() {
  shifu_cmd_name get
  shifu_cmd_help "Get issue in a GitHub repository"
  shifu_cmd_func issue_get

  shifu_arg -- ISSUE_NUMBER "Issue number to get"
}

issue_get() {
  shifu_parse_args issue_get_cmd "$@"
  _gh_api "repos/$REPO/issues/$ISSUE_NUMBER" | \
    jq -M '
      "\(.title)
URL: \(.url)
State: \(.state)
Author: \(.user.login)
Body: \(.body)
"' | xargs printf
}

pr_cmd() {
  shifu_cmd_name pr
  shifu_cmd_help "Commands for interacting with github repository pull requests"
  shifu_cmd_subs pr_list_cmd pr_get_cmd

  shifu_arg -R --repo -- REPO "Github repository in OWNER/REPO format"
}

pr_list_cmd() {
  shifu_cmd_name list
  shifu_cmd_help "List pull requests in a GitHub repository"
  shifu_cmd_func pr_list

  shifu_arg -n --number -- NUMBER 10 "Max number of results"
}

pr_list() {
  shifu_parse_args pr_list_cmd "$@"
  update_query per_page "$NUMBER"
  _gh_api "repos/$REPO/pulls$query" | \
    jq -M '.[] | "\(.number): \(.title)"' | xargs -I{} echo {}
}

pr_get_cmd() {
  shifu_cmd_name get
  shifu_cmd_help "Get pr in a GitHub repository"
  shifu_cmd_func pr_get

  shifu_arg -- PR_NUMBER "Pull request number to get"
}

pr_get() {
  shifu_parse_args pr_get_cmd "$@"
  _gh_api "repos/$REPO/pulls/$PR_NUMBER" | \
    jq -M '
      "\(.title)
URL: \(.issue_url)
State: \(.state)
Author: \(.user.login)
Body: \(.body)
"' | xargs printf
}

update_query() {
  [ -z "$2" ] && return
  [ -z "$query" ] && query="?" || query="$query&"
  query="$query$1=$2"
}

_gh_api() {
  curl -sL \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer $(_auth_get)" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "https://api.github.com/$1"
}

shifu_run_cmd sgh_cmd "$@"
