#! /bin/sh

# Example shifu cli to partially reproduce similar functionality that
# the github cli, gh, provides. Wrapper around curl commands to the
# github rest api. Documentation:
# https://docs.github.com/en/rest?apiVersion=2022-11-28

. "${0%/*}"/shifu && shifu_less || exit 1

auth_file="$HOME/.sgh"

sgh_cmd() {
  cmd_name sgh
  cmd_help "Example github cli implemented with shifu"
  cmd_subs auth_cmd issue_cmd pr_cmd
}

auth_cmd() {
  cmd_name auth
  cmd_help "Commands for interacting authentication tokens"
  cmd_subs auth_clear_cmd auth_set_cmd
}

auth_set_cmd() {
  cmd_name set
  cmd_help "Set token for authentication"
  cmd_func auth_set

  cmd_arg -- PAT "Personal access token, documentation:
      https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens"
}

auth_set() {
  printf "$PAT" > "$auth_file"
}

auth_clear_cmd() {
  cmd_name clear
  cmd_help "Clear token for authentication"
  cmd_func auth_clear
}

auth_clear() {
  [ -f "$HOME/.sgh" ] && rm "$HOME/.sgh"
}

_auth_get() {
  cat "$auth_file"
}

issue_cmd() {
  cmd_name issue
  cmd_help "Commands for interacting with github repository issues"
  cmd_subs issue_list_cmd issue_get_cmd

  cmd_arg -R --repo -- REPO "Github repository in OWNER/REPO format"
}

issue_list_cmd() {
  cmd_name list
  cmd_help "List issues in a GitHub repository"
  cmd_func issue_list

  cmd_arg -n --number -- NUMBER 10 "Max number of results"
}

issue_list() {
  _resolve_repo
  _update_query per_page "100"
  _gh_api "repos/$REPO/issues$query" | \
    jq -M "map(select(has(\"pull_request\")|not) |
           \"\(.number): \(.title)\") |
           .[:$NUMBER] | .[]" \
    | xargs -I{} echo {}
}

issue_get_cmd() {
  cmd_name get
  cmd_help "Get issue in a GitHub repository"
  cmd_func issue_get

  cmd_arg -- ISSUE_NUMBER "Issue number to get"
}

issue_get() {
  _resolve_repo
  _gh_api "repos/$REPO/issues/$ISSUE_NUMBER" | \
    jq -M '
      "\(.title)
URL: \(.url)
State: \(.state)
Author: \(.user.login)
Body: \(.body)
"' | xargs printf
}

pr_cmd() {
  cmd_name pr
  cmd_help "Commands for interacting with github repository pull requests"
  cmd_subs pr_list_cmd pr_get_cmd

  cmd_arg -R --repo -- REPO "Github repository in OWNER/REPO format"
}

pr_list_cmd() {
  cmd_name list
  cmd_help "List pull requests in a GitHub repository"
  cmd_func pr_list

  cmd_arg -n --number -- NUMBER 10 "Max number of results"
}

pr_list() {
  _resolve_repo
  _update_query per_page "$NUMBER"
  _gh_api "repos/$REPO/pulls$query" | \
    jq -M '.[] | "\(.number): \(.title)"' | xargs -I{} echo {}
}

pr_get_cmd() {
  cmd_name get
  cmd_help "Get pr in a GitHub repository"
  cmd_func pr_get

  cmd_arg -- PR_NUMBER "Pull request number to get"
}

pr_get() {
  _resolve_repo
  _gh_api "repos/$REPO/pulls/$PR_NUMBER" | \
    jq -M '
      "\(.title)
URL: \(.issue_url)
State: \(.state)
Author: \(.user.login)
Body: \(.body)
"' | xargs printf
}

_resolve_repo() {
  [ -n "$REPO" ] && return
  origin_url=$(git config --get remote.origin.url)
  if [ "${origin_url}" != "${origin_url#https}" ]; then
    REPO="${origin_url#https://github.com/}"
  elif [ "${origin_url}" != "${origin_url#git}" ]; then
    REPO="${origin_url#git@github.com:}"
  else
    echo "Unknown repo url format: $origin_url"
    exit 1
  fi
  REPO="${REPO%.git}"
}

_update_query() {
  [ -z "$2" ] && return
  [ -z "$query" ] && query="?" || query="$query&"
  query="$query$1=$2"
}

_gh_api() {
  curl -sL \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer $(_auth_get)" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "https://api.github.com/$1"
}

shifu_run sgh_cmd "$@"
